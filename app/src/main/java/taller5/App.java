/*
 * This source file was generated by the Gradle 'init' task
 */
package taller5;

public class App {
    
    public static void main(String[] args) {
        
        try {
            
        } 
        
        catch (Exception e) {
            // TODO: handle exception
        }
    }


    /*
    
        1.	Desarrolle un algoritmo e impleméntelo en Java que: le pida al usuario un número entero positivo 
        entre 1000 y 9999. En un ciclo genere números de manera aleatoria y cuente los intentos que hizo antes 
        de hallar el número exactamente.
        
    
    */ 
    public static String hallar_numero(){
        try {
            final short MIN = 1_000;
            final short MAX = 10_000;
            final byte UNO = 1;
            Scanner input = new Scanner(System.in);

            short numero_usuario;
            do {
                System.out.println("Introduzca un numero entre 1000 y 9999: ");
                numero_usuario = input.nextShort();
                if (numero_usuario < MIN || numero_usuario >= MAX) System.out.println("El numero no está dentro del rango especificado, intentelo de nuevo");
            }while (numero_usuario < MIN || numero_usuario > MAX);

            short aleatorio;
            short intentos = 0;
            do {
                aleatorio = (short) (Math.random() * (MAX - MIN + UNO) + MIN);
                intentos ++;
            }while (aleatorio != numero_usuario);
            return String.format("Fin, el numero era %s, tomó %s intentos", aleatorio, intentos);
        } catch (Exception e) {
            return "Ha ocurrido un error: " + e;
        }
    }




    /* 
     
        2.	Se requiere una función en java que simule las ventas de tres años para un almacén. Para cada año, deberá generar 
        un aleatorio para cada mes hasta completar los 12 meses. La función se llamará Simular_ventas, y debe retornar un String 
        al final que muestre las ventas de cada año, así:
        
            Año 1
            Ventas Mes 1: $##.###.###
            :
            Ventas Mes 12: $##.###.###
            Total ventas Año 1:  $##.###.###
            
            Año 2
            Ventas Mes 1: $##.###.###
            :
            Ventas Mes 12: $##.###.###
            Total ventas Año 2: $##.###.###
            
            Año 3
            Ventas Mes 1: $##.###.###
            :
            Ventas Mes 12: $##.###.###

            Total ventas Año 3: $##.###.###
            
            Investigue sobre la clase DecimalFormat para mostrar bien la salida. 
            import java.text.DecimalFormat;
            DecimalFormat form_pesos = new DecimalFormat("$#,###.00");

        
      
    */
    public  static String simular_ventas(){
        final int MILLON = 1_000_000;

        StringBuilder salida = new StringBuilder();
        DecimalFormat df = new DecimalFormat("$#,###.00");
        double ventas_mes;
        double total_ventas;

        for (int i = 1; i < 4; i++) {
            total_ventas = 0;
            salida.append(String.format("Año %s\n", i));
            for (int j = 1; j < 13; j++) {
                ventas_mes =  (Math.random() * MILLON);
                total_ventas += ventas_mes;
                salida.append(String.format("Ventas mes %s: %s\n", j, df.format(ventas_mes)));
            }
            salida.append(String.format("Total ventas año %s: %s\n", i, df.format(total_ventas)));
        }
        return salida.toString();
    }

    



    /*  
     
        3.	En una fábrica se tiene el siguiente patrón de empaque: En una estiba(o pallet) caben 16  cajas y en cada caja, 
        caben 30 bombillas. Desarrolle una función que se llame: Calcular_empaque que: reciba como argumento la cantidad de 
        bombillas que se deben empacar y a partir de allí: calcule cuántas cajas necesita, cuántas estibas o pallets necesita. 
        Luego escriba lo siguiente: 

        Para ### bombillas, se necesitan ## cajas y ## pallets. Se quedan ### bombillas sin empacar. Se empacará así:

        Pallet 1 --> Caja1, Caja2……,Caja16
        Pallet2 -->  Caja17, Caja18…..Caja 32
        .
        Pallet n -- > Caja m, caja m+1…..
        
        La función retornará un texto, con la información anterior. Pruebe la función llamándola desde el programa principal: solicite al usuario el número de bombillas e invoque la función para imprimir en el main, los resultados.



    */
    public static String Calcular_empaque(int bombillas){
        try {
            StringBuilder mensaje = new StringBuilder();
            final byte CAJASxESTIBA = 16;
            final byte BOMBILLASxCAJA = 30;

            double total_cajas = (short) (bombillas / BOMBILLASxCAJA);
            double resto_bombillas = (short) (bombillas - total_cajas*BOMBILLASxCAJA);
            double total_estiba = Math.ceil(total_cajas / CAJASxESTIBA);

            mensaje.append(String.format("Para %s bombillas, se necesitan %s cajas y %s pallets. Se quedan %s bombillas sin empacar. Se empacará así:\n", bombillas, total_cajas, total_estiba, resto_bombillas));

            byte num_palet = 1;
            byte contador_pallet = 16;
            for (int i = 1; i <= total_cajas; i++) {
                if (contador_pallet == CAJASxESTIBA) {
                    mensaje.append(String.format("\nPallet %s => ", num_palet));
                    num_palet++;
                    contador_pallet = 0;
                }
                mensaje.append(String.format("Caja %s, ", i));
                contador_pallet += 1;
            }
            return mensaje.toString();
        }
        catch (Exception e) {
            return "Ha ocurrido un error\n" + e;
        }
    }



    

    /* 
    

        4.	En un juego, cada jugador tiene 3 intentos para sacar cartas de una baraja. Las cartas van numeradas entre 1 y 10. 
        Una función Jugar_21, deberá simular el juego para una cantidad de usuarios que enviará el usuario desde el main entre 1 y 6.

        Para cada uno de los jugadores, el programa le calculará 3 cartas al azar y al final imprimirá el juego para cada jugador basado en las siguientes reglas: 
        
        Si saca 21 exactos: juego perfecto
        Si saca más de 21: se pasó
        Si saca menos de 21: faltaron puntos

        La función deberá imprimir los puntos de cada jugador junto con la regla anterior, como muestra el ejemplo:

        Jugador X, puntos 21 -- > juego perfecto
        Jugador Y, puntos 26 -- > se pasó
        .
        .


    */
    public static String juego_cartas(byte n_jugadores){
        try {

            final byte MAX_JUGADORES = 6;
            final byte MIN_JUGADORES = 1;
            if (n_jugadores < MIN_JUGADORES || n_jugadores > MAX_JUGADORES)
                return String.format("Tiene que haber entre %s y %s jugadores", MIN_JUGADORES, MAX_JUGADORES);

            final byte MAX_CARTA = 10;
            final byte MIN_CARTA = 1;
            final byte NUM_CARTAS = 3;
            final byte PERFECTO = 21;

            byte carta, total;
            StringBuilder mensaje = new StringBuilder();

            for (int i = 1; i <= 3; i++) {
                mensaje.append(String.format("\n-----Intento %s-----", i));
                for (int j = 1; j <= n_jugadores; j++) {
                    total = 0;
                    mensaje.append(String.format("\nJugador %s => ", j));
                    for (int k = 1; k <= NUM_CARTAS; k++) {
                        carta = (byte) (Math.random() * (MAX_CARTA) + MIN_CARTA);
                        total += carta;
                        mensaje.append(String.format("%s, ", carta));
                    }
                    mensaje.append(String.format("\nTotal => %s\t", total));
                    if (total < PERFECTO)
                        mensaje.append("faltaron puntos");
                    else if (total > PERFECTO)
                        mensaje.append("se pasó");
                    else
                        mensaje.append("juego perfecto");
                }
            }
            return mensaje.toString();
        }
        catch (Exception e) {
            return "Ha ocurrido un error\n" + e;
        }
    }



}
